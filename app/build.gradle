apply plugin: 'com.android.application'

import org.dicio.sentences_compiler.main.SentencesCompiler
import org.dicio.sentences_compiler.compiler.CompilerToJava
import groovy.json.JsonSlurper

import java.nio.charset.StandardCharsets

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "org.dicio.dicio_android"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true

        // add folders generated by sentencesCompiler and apiKeysGenerator tasks
        sourceSets.main.java.srcDirs += "build/generated/source/sentences/main"
        sourceSets.main.java.srcDirs += "build/generated/source/api_keys/main"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

dependencies {
    implementation project(':aars')
    implementation project(':models')

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.preference:preference:1.1.1'

    testImplementation 'junit:junit:4.13.1'

    implementation 'com.github.Stypox:dicio-assistance-component:0f117f4c09fe9ccfb0a44cfd4dd8447ce5935b98'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation "io.reactivex.rxjava3:rxjava:3.0.7"
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"
    implementation 'org.unbescape:unbescape:1.1.6.RELEASE'
    implementation 'org.jsoup:jsoup:1.13.1'
}


task sentencesCompiler {
    doFirst {
        File baseInputDirectory = file("src/main/sentences/")
        File outputDirectory = file("build/generated/source/sentences/main/org/dicio/dicio_android")
        outputDirectory.mkdirs()

        List<String> locales = new ArrayList<>()
        Set<String> allSectionIds = new HashSet<>()
        for (String localeName :
                baseInputDirectory.list({ dir, name -> new File(dir, name).isDirectory() })) {
            locales.add(localeName)
            File[] filesInDirectory = new File(baseInputDirectory, localeName).listFiles()
            if (filesInDirectory.length == 0) {
                continue
            }

            List<String> inputFiles = new ArrayList<>()
            for (File file : filesInDirectory) {
                inputFiles.add("UTF-8:" + file.absolutePath)
            }

            OutputStream outputStream = new FileOutputStream(file("${outputDirectory}/Sentences_${localeName}.java"))
            ByteArrayOutputStream sectionIdsStream = new ByteArrayOutputStream()
            SentencesCompiler.compile(
                    inputFiles,
                    new OutputStreamWriter(outputStream, StandardCharsets.UTF_8),
                    new OutputStreamWriter(sectionIdsStream, StandardCharsets.UTF_8),
                    new CompilerToJava("", "org.dicio.dicio_android", "Sentences_${localeName}", "sections"))
            outputStream.close()
            sectionIdsStream.close()

            String sectionIds = new String(sectionIdsStream.toByteArray(), StandardCharsets.UTF_8)
            allSectionIds.addAll(sectionIds.split(" "))
        }


        OutputStream fileOutputStream = new FileOutputStream(file("${outputDirectory}/SectionsGenerated.java"))
        OutputStreamWriter outputStream = new OutputStreamWriter(fileOutputStream, StandardCharsets.UTF_8)
        outputStream.write("/*\n"
                + " * FILE AUTO-GENERATED BY GRADLE TASK sentencesCompiler.\n"
                + " * DO NOT MODIFY THIS FILE, AS EDITS WILL BE OVERWRITTEN.\n"
                + " */\n"
                + "\n"
                + "package org.dicio.dicio_android;\n"
                + "import org.dicio.component.standard.StandardRecognizerData;\n"
                + "import java.util.HashMap;\n"
                + "import java.util.Map;\n")

        outputStream.write("public class SectionsGenerated {\n" +
                "public static final Map<String,Map<String,StandardRecognizerData>> localeSectionsMap=new HashMap<String,Map<String,StandardRecognizerData>>(){{")
        for (String localeName : locales) {
            outputStream.write("put(\"${localeName.toLowerCase()}\",Sentences_${localeName}.sections);")
        }
        outputStream.write("}};\n")

        if (!allSectionIds.isEmpty()) {
            outputStream.write("public static final String ")

            boolean first = true
            for(String sectionId : allSectionIds) {
                if (first) {
                    first = false
                } else {
                    outputStream.write(",")
                }
                outputStream.write("${sectionId}=\"${sectionId}\"")
            }
            outputStream.write(";\n")
        }
        outputStream.write("}\n")
        outputStream.flush()
        fileOutputStream.close()
    }
}
preBuild.dependsOn(sentencesCompiler)

task apiKeysGenerator {
    doFirst {
        File keysFilename = file("src/main/api_keys.json")
        File outputDirectory = file("build/generated/source/api_keys/main/org/dicio/dicio_android/")
        outputDirectory.mkdirs()
        File outputFilename = file("$outputDirectory/ApiKeys.java")

        OutputStreamWriter outputFile = new OutputStreamWriter(new FileOutputStream(outputFilename))
        def json = new JsonSlurper().parseText(keysFilename.text)

        outputFile.write("/*\n"
                + " * FILE AUTO-GENERATED BY GRADLE TASK apiKeysGenerator FROM src/main/api_keys.json.\n"
                + " * DO NOT MODIFY THIS FILE BUT EDIT src/main/api_keys.json INSTEAD.\n"
                + " */\n"
                + "\n"
                + "package org.dicio.dicio_android;\npublic class ApiKeys {\n")

        json.each { k, v ->
            outputFile.write("public static final String ")
            outputFile.write(k)
            outputFile.write(" = \"")
            outputFile.write(v)
            outputFile.write("\";\n")
        }
        outputFile.write("}\n")

        outputFile.close()
    }
}
preBuild.dependsOn(apiKeysGenerator)
